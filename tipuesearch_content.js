var tipuesearch = {"pages":[{"title":"My First Post","text":"This is so amazing. It's my first post. Why I guess just for the fun of it.","tags":"Programming, Java","url":"https://authsec.github.io/datapile/my-first-post","loc":"https://authsec.github.io/datapile/my-first-post"},{"title":"How To Start A Consul Docker Image","text":"If you quickly have to start a Consul docker image you can use the following command: docker run -p 8400:8400 -p 127.0.0.1:8500:8500 -p 8600:8600/udp -h node1 consul agent -dev -client 0.0.0.0 This is especially useful for development purposes and quick tests and should not be used in a productive environment.","tags":"Infrastructure","url":"https://authsec.github.io/datapile/how-to-start-a-consul-docker-image","loc":"https://authsec.github.io/datapile/how-to-start-a-consul-docker-image"},{"title":"Pro Tools - Playlists","text":"When working with Pro Tools you may find yourself in a position where you need to create a few takes of for example a chorus. Instead of creating a completely new track for every take you do, you can simply create what is called a playlist in Pro Tools. Shortcut You can create a playlist using the right control key and the backslash symbol like RCTRL - \\ . There is also another shortcut assigned if you may not have remapped it in OS X or it may be mapped to something else by default. That shortcut would be LCMD - LALT - LSHIFT - \\ where the letter L denotes the keys on the left side of the keyboard are pressed.","tags":"Music","url":"https://authsec.github.io/datapile/pro-tools-playlists","loc":"https://authsec.github.io/datapile/pro-tools-playlists"},{"title":"Grenade - Cover Version","text":"For the first time ever I am on YouTube! So feel free to check out the cover version of Bruno Mars' song \"Grenade\". Hope you enjoy it!","tags":"Music","url":"https://authsec.github.io/datapile/grenade-cover-version","loc":"https://authsec.github.io/datapile/grenade-cover-version"},{"title":"Unser Lied","text":"Deutsch Dieses Lied hab ich für die Hochzeit zwischen Ilka und Alexander geschrieben. Ich hoffe beide werden eine lange Zeit Freude an diesem Lied haben. English I wrote this song for the wedding between Ilka and Alexander. I very much hope they both enjoy the title for a long time. The Song John C. Flow · Unser Lied Can be found at: https://soundcloud.com/john-c-flow/unser-lied The Lyrics Words & Music: Jens Frey Tempo: 83 BPM Key: D Verse [D]Komm her, Halt mich [A]fest, Nimm [Hm]mich in Deine Arme, [G]Hier und [Gm]jetzt. Ich [A]will Dich [D]fühln, ganz nah bei [A]mir, Will [Hm]deinen Atem spürn, Der mich [G]wärmt, so dass ich nicht [Gm]frier. Ich will Dich [D]halten, für [A]immer in meinem Arm, könnt auf [Hm]ewig mit Dir tanzen, doch die Mu[G]sik ist nicht mehr [Gm]an. Bridge [Em]Ich schalt das [D]Radio ein, Ich [Em]dreh voll [D]auf, [Em]Spürst du den [D]Beat? Komm [A]Tanz mit mir, denn Chorus Das unser [D]Lied, in dem die [A]Zeit nie entflieht, Hier ist [F#m]der Moment gefangen, In [G]dem wir uns ver-[Gm]liebt, Das ist unser [D]Lied, In dem uns [A]nichts passieren kann, Hier sind wir [Hm]beide unverwundbar, Hier ist [G]sichrer Hafen, [A]Sichres Ge[D]biet. Verse [D]Ich will immerzu, in [A]Deiner Nähe sein, bin immer [Hm]mit Dir in Gedanken, e[G]gal wo ich [Gm]bin, Kann [A]einfach [D]nicht, ohne Deine [A]Liebe sein, Brauch sie [Hm]wie die Luft zum atmen, [G]lass mich nie al-[Gm]lein. Bridge [Em]Ich schalt das [D]Radio ein, Ich [Em]dreh voll [D]auf, [Em]Spürst du den [D]Beat? Komm [A]Tanz mit mir, denn Chorus Das ist unser [D]Lied, in dem die [A]Zeit nie entflieht, Hier ist [F#m]der Moment gefangen, In [G]dem wir uns ver-[Gm]liebt, Das ist unser [D]Lied, In dem uns [A]nichts passieren kann, Hier sind wir [Hm]beide unverwundbar, Hier ist [A]sichrer Hafen, [A]Sichres Ge[D]biet. Solo [D/A/Hm/G/A D/A/Hm/A/A/D ] Chorus Das ist unser [D]Lied, in dem die [A]Zeit nie entflieht, Hier ist [F#m]der Moment gefangen, In [G]dem wir uns ver-[Gm]liebt, Das ist unser [D]Lied, In dem uns [A]nichts passieren kann, Hier sind wir [Hm]beide unverwundbar, Hier ist [G]sichrer Hafen, [A]Sichres Ge[D]biet. [G]Lass es uns nie ver-[A]gessen, unser [D]Lied [G]Lass es uns nie ver-[A]gessen, unser [D]Lied","tags":"Music","url":"https://authsec.github.io/datapile/unser-lied","loc":"https://authsec.github.io/datapile/unser-lied"},{"title":"Goondown","text":"Just playing around with the software, seems to be a mix between Trance and Easy Listening … John C. Flow · Goondown Can be found at: https://soundcloud.com/john-c-flow/goondown","tags":"Music","url":"https://authsec.github.io/datapile/goondown","loc":"https://authsec.github.io/datapile/goondown"},{"title":"Goodbye","text":"The song John C. Flow · Goodbye Can be found at: https://soundcloud.com/john-c-flow/goodbye The lyrics Verse [F#m]Like a lonesome voice, [A]in the crowd, [F#m]like a broken toy, [A]left on the ground, [Bm]I feel like I've been left behind, [D]been canceled out, [Bm]no one's right here by my side, [Esus4]no one is a[E]round. [F#m]I've been on this empty road, [A]for quite some time, [F#m]I've been searching out for love, [A]but never could find mine. [Bm]It always ran away from me, [D]I never was that fast, [Bm]I had just a simple dream, [D]but it couldn't l[Esus4]a—-a[E]st … Chorus [A]Good-[C#m7]bye, [D]my [E]everlasting dre[A]am, [A] [C#m7] [D] [E] [A] [A]Good-[C#m7]bye, [D]love is [E]never like it s[A]eems [A] [C#m7] [D] [E] Cause when there's [Dmaj7]love there's misery, which is a[Asus2/C#]lways finding me, love has a b[Bm]etter place to [Esus4]be, like [F#5]me. Verse [F#m]If only I could understand, [A]why it is me, [F#m]is it just my bad luck or my [A]destiny? [Bm]what is it what the others do? what [D]is it? Please tell me. [Bm]I guess I will never know, so I say [D]goodbye to my [Esus4]drea—[E]m. Chorus [A]Good-[C#m7]bye, [D]my [E]everlasting dre[A]am, [A] [C#m7] [D] [E] [A] [A]Good-[C#m7]bye, [D]love is [E]never like it s[A]eems [A] [C#m7] [D] [E] The only [D]thing I [E]now do [F#m]fear, is [D]someone [E]getting [F#m]near, Who will [D]brake my [E]heart and [F#m]then, I have to [Esus4]say goodbye ag[E]ain. Solo over [A][C#m7][D][E] [A][C#m7][D][E] [A][C#m7][D][E] [Dmaj7][C#m7][Esus4][E] Chorus [A]Good-[C#m7]bye, [D]my [E]everlasting dre[A]am, [A] [C#m7] [D] [E] [A] [A]Good-[C#m7]bye, [D]love is [E]never like it s[A]eems [A] [C#m7] [D] [E] Cause when there's [Dmaj7]love there's misery, which is a[Asus2/C#]lways finding me, love has a b[Bm]etter place to [Esus4]be, like [F#5]me.","tags":"Music","url":"https://authsec.github.io/datapile/goodbye","loc":"https://authsec.github.io/datapile/goodbye"},{"title":"Use your own website as OpenID login","text":"If you want to use OpenID as an authentication mechanism, but are afraid of the fact that your OpenID provider may die in the future, or you simply might want to use another provider in the future, you can use a delegation model with OpenID. A reason to change the OpenID provider might be, that your current OpenID provider does not support an authentication mechanism you like to, as for example the YubiKey or something like that. Let's say you want to use http://xyz.example.com as your OpenID and you want to use http://clavid.com as your Identity Provider, you have to execute the following steps. Create a (sub-)domain for example.com called xyz. This can for example be done by adding another virtual host to your apache configuration. The configuration might look like the following one: <VirtualHost xx.xx.xx.xx:80 > ServerAdmin webmaster@example.com ServerName xyz.example.com DocumentRoot /var/www/xyz/ <Directory /var/www/xyz/ > # Options Indexes MultiViews AllowOverride None Order allow,deny allow from all </Directory> ErrorLog /var/log/apache2/error_xyz.log # Possible values include: debug, info, notice, warn, error, crit, # alert, emerg. LogLevel warn CustomLog /var/log/apache2/access_xyz.log combined </VirtualHost> Create a index.html file inside your document root As a next step you have to create a index.html file in your document root (in this case /var/www/xyz ) with the following content in order for OpenID services being able to find your current identity provider: < html > < head > < title > Jens' OpenID delegation page </ title > < link rel = \"openid.server\" href = \"http://www.clavid.com/provider/openid\" /> < link rel = \"openid2.provider\" href = \"http://www.clavid.com/provider/openid\" /> < link rel = \"openid.delegate\" href = \"http://jens.clavid.com\" /> < link rel = \"openid2.local_id\" href = \"http://jens.clavid.com\" /> </ head > < body > < h1 > This page is used for OpenID delegation. </ h1 > For more information on OpenID either visit < a href = \"http://openid.net\" > http://openid.net < a > or < a href = \"http://clavid.com\" > http://clavid.com </ a > </ body > </ html > Ready From now on you can use http://xyz.example.com as your OpenID, which will, as currently configured, be redirecting to http://clavid.com where authentication will take place. References You can read all about OpenID in the specification, but the part used for this example is available at: http://openid.net/specs/openid-authentication-1_1.html#delegating_authentication","tags":"Security","url":"https://authsec.github.io/datapile/use-your-own-website-as-openid-login","loc":"https://authsec.github.io/datapile/use-your-own-website-as-openid-login"},{"title":"Programming with the APR","text":"This article will give you an introduction of how to program with the Apache Portable Runtime ( APR ). It illustrates a simple command line program. Note The program supplied should actually use apr_app_initialize(&argc, &argv, NULL); since apr_initialize() is intended for library use only. I was playing around with the Apache Portable Runtime ( APR ) recently and found out, probably the most difficult part was to find out how to compile the program you have just written. The probably most famous projects using APR are the Apache HTTPd and Subversion. Overview APR 's goal is to provide a platform independent API that provides a consistent interface to the platform specific implementation. The APR code itself is pretty good documented. But i wouldn't say you'd find plenty of resources on the web. Especially a simple example on how to program with the APR was missing for me. Example program I put together an example program which shows how to use the APR . This includes instructions on how to get the program compiled after you have written it. This seems to be so self-evident to people, that no one seems to write that up. The heart of this process lies in the usage of the apr-config , or sometimes called apr-1-config utility. Preconditions Make sure you have the APR development files installed. Since i am mostly working with Debian based distributions, like Debian itself or Ubuntu, i install the libraries with my package management system. Of course make sure you install the \"-dev\" versions of APR . For me that have been the packages libapr1 libapr1-dbg libapr1-dev libaprutil1 libaprutil1-dbg libaprutil1-dev You can get those packages by issuing the following command on the command line (this may of course vary if you are not using a Debian based distribution or if you install from source): $ sudo apt-get install libapr1 libapr1-dbg libapr1-dev libaprutil1 libaprutil1-dbg libaprutil1-dev Program code The program itself is obviously a pretty easy one, it basically allocates resources from a memory pool managed through APR onto a struct and later simply prints the allocated values. The programs code is as follows. Compile the program Now there comes the next crucial step in getting your program to fly. To do so you probably best export a variable as suggested by the apr-1-config tool. Then you can go on an compile your program the \"normal\" way you'd do that. If you do not want debug symbols compiled into your code, you of course would remove the -g option in front of the APR_LIBS variable: $> export APR_LIBS=\"`apr-1-config --cflags --cppflags --includes --ldflags --link-ld --libs`\" $> gcc -g simple_apr.c -o simple_apr $APR_LIBS By executing the program your output should now look something like that: $ ./simple_apr Username: Jens Frey Password: secret Time: 1231102877630911 Time readable: Sun, 04 Jan 2009 21:01:17 GMT I hope you achieved similar results. References The APR homepage The APR API documentation Using APR Pools Writing Portable C Code with APR","tags":"Programming","url":"https://authsec.github.io/datapile/programming-with-the-apr","loc":"https://authsec.github.io/datapile/programming-with-the-apr"},{"title":"Free iPhone Ringtone #1","text":"I created a free drum and bassy iPhone ringtone, install it if you like :) Your browser does not support the audio element. Download iPhone Ringtone ( M4R ) Hope you have fun with it …","tags":"Music","url":"https://authsec.github.io/datapile/free-iphone-ringtone-1","loc":"https://authsec.github.io/datapile/free-iphone-ringtone-1"},{"title":"Setup roller weblogger 4.1 on Glassfish v2","text":"This guide will walk you through installing the Apache Roller Blog Software, version 4.1(-dev). The installation I did, resides on a Debian based distribution (Ubuntu works too, just prefix the commands with sudo). Note This was implemented/tested with Roller Weblogger 4.1 and Glassfish v2UR2 Quick install This is for the impatient, you need to have jar and wget in your $ PATH If you just want to have roller to be set up for you to do e.g. some work on roller templates, or just to basically play with it a bit, here is the real quick deal for you (This will install everything into /opt/roller). Download the automated installer script , save it to e.g. your home directory. Then call the script like ./rollerGlassfish.sh realLongKey1 realLongKey2 run-as-username run-as-groupname . Note You can get those long keys easily from GRC . Manual installation The following text basically describes what the script is automatically doing for you. This way you can change the according parameters which will affect your installation. Most probably you will just have to change the following variables inside the install script. Prerequisites You have to install a few things before you can actually start installing roller on your system. At first you need to be sure that the jar command is installed on your system, since this is required for the build you will be doing on your system. On a Debian based system you can do that with the following command: root@sigusr1:$ aptitude install sun-java5-jdk After the JDK installation you basically have everything ready to go, but wait if you want to use my automated installer script you need to have the wget command installed too, since the script tries to download the Glassfish application server and the given Apache Roller version by itself in order to be able to install it for you. root@sigusr1:$ # TARGET = /opt/roller TARGET_TMP = ${ TARGET } /tmp UPLOADS = $TARGET /uploads THEMES = $TARGET /themes PLANET_CACHE = $TARGET /planetcache SEARCH_INDEX = $TARGET /searchindex #ROLLER_FILENAME=\"apache-roller-4.0.1-snapshot-20080211.tar.gz\" ROLLER_FILENAME = \"apache-roller-4.1-snapshot-m1.tar.gz\" CTX_ROOT = \"blogs\" Gist: https://gist.github.com/authsec/455940a3f6bd5673c1c9dd16ea4ec0af Download Glassfish Choose install location As a last prerequisite step you need to choose an install location. I chose /opt/roller to be the install location of my choice. Setup user and group As you probably won't be running roller as root, you'll have to setup a user and a group for your roller installation. This, again on Debian based systems, is done using the following commands: root@sigusr1:$ mkdir /opt/roller addgroup --system roller adduser --home /opt/roller \\ --shell /bin/bash \\ --no-create-home \\ --ingroup roller \\ --disabled-password \\ --system roller Setup Glassfish I assume you downloaded roller and glassfish into /opt/roller/tmp . In order to get the Glassfish installation working, you need to have JAVA_HOME exported into your environment. Then you can start running the Glassfish installer. On a bourne shell do (inside the directory where you saved the Glassfish installer): root@sigusr1:$ cd /opt/roller/tmp export JAVA_HOME = /usr/lib/jvm/java-1.5.0-sun java -Xmx256m -jar glassfish-installer-v2ur2-b04-linux.jar The installer will ask you if you are willing to accept the license agreement. If you are running this on a remote machine, it will ask you on the command line, whether or not you are willing to accept; on your local machine it will show a nice graphical dialog for you to accept. After that setup is completed, do (machine name is included, so you're able to see in which directory I'm operating) j@sigusr1:/opt/roller/tmp$ mv glassfish .. j@sigusr1:/opt/roller/tmp$ cd ../glassfish/ j@sigusr1:/opt/roller/glassfish$ chmod -R +x lib/ant/bin As a next step you have to setup a domain for roller within Glassfish, this is a rather easy task to do: j@sigusr1:/opt/roller/glassfish$ lib/ant/bin/ant -f setup.xml -Ddomain.name = roller Now start Glassfish, so we can do s.th. with it … j@sigusr1:/opt/roller/glassfish$ ./bin/asadmin start-domain roller Setup built in database The following series of command all takes place inside the /opt/roller/glassfish directory. root@sigusr1:$ ./bin/asadmin create-jdbc-connection-pool \\ --datasourceclassname org.apache.derby.jdbc.EmbeddedDataSource \\ --property databaseName = \\$\\{ com.sun.aas.instanceRoot \\} /databases/rollerdb: \\ connectionAttributes = \\; create \\\\ = true rollerpool ./bin/asadmin ping-connection-pool rollerpool ./bin/asadmin create-jdbc-resource --connectionpoolid = rollerpool jdbc/rollerdb Setup JNDI mail resource If that would work in roller 4.1(-dev) with Glassfish, you would do: root@sigusr1:$ ./bin/asadmin create-javamail-resource --mailhost localhost --mailuser rollermail --fromaddress roller \\@ blogs \\. coffeecrew \\. org mail/Session Securing Glassfish Some of you might be thinking about running Glassfish behind an Apache reverse proxy. This is exactly what I am thinking about. So if you plan to do that, it might come in handy that Glassfish would only accept connections from the local machine and therefore not let anyone easily bypass your secured apache instance. First we delete both HTTP listener instances that are listening on ports 8080 and 8443 and then recreate the 8080 one. As we are proxying with apache, we do not need the SSL listener (port 8443) anyway. And while we're just doing it, let's rebind those IIOP services to. root@sigusr1:$ ./bin/asadmin delete-http-listener http-listener-1 ./bin/asadmin delete-http-listener http-listener-2 ./bin/asadmin create-http-listener --listeneraddress 127 .0.0.1 --listenerport 8080 --acceptorthreads 32 --enabled = true --defaultvs server --securityenabled = false roller-listener # Configure admin page to listen locally too ./bin/asadmin set server.http-service.http-listener.admin-listener.address = 127 .0.0.1 # Disable IIOP stuff to listen globally, we do not need that right now. ./bin/asadmin set server.iiop-service.iiop-listener.SSL.address = 127 .0.0.1 ./bin/asadmin set server.iiop-service.iiop-listener.SSL_MUTUALAUTH.address = 127 .0.0.1 ./bin/asadmin set server.iiop-service.iiop-listener.orb-listener-1.address = 127 .0.0.1 # Disable JMX connector for remote access ./bin/asadmin set server.admin-service.jmx-connector.system.enabled = false # JMS ./bin/asadmin set server.jms-service.jms-host.default_JMS_host.host = localhost # Require client authentication, just to be sure ... ./bin/asadmin set server.iiop-service.client-authentication-required = true Now, to make changes effective we have to restart Glassfish. But before that we want to make sure everything has correct permissions for our newly created user, won't we? root@sigusr1:$ # Fix permissions chown -R roller:roller /opt/roller # Restart gf to make changes effective ./bin/asadmin stop-domain roller # Start as roller user su -c \"./bin/asadmin start-domain roller\" roller Setup and configure Roller Setting up Roller 4.1(-dev) is pretty easy. We start by extracting the tarball we downloaded earlier. Since we have set our theme directory to be /opt/roller/themes we do have to copy the themes we want to use there. As a next step we really want to have security keys **changed** . This is done by either editing the security.xml file manually or using a sed expression. After we have changed the keys, we can pack us a nice roller.war file. The few commands below execute the described actions. root@sigusr1:$ #Roller setup cd /opt/roller/tmp tar zxvf apache-roller-4.1-snapshot-m1.tar.gz #Copy themes cd apache-roller*/webapp/roller/themes cp -vR * /opt/roller/themes cd ../WEB-INF cp security.xml /tmp # actually change keys cat /tmp/security.xml | \\ sed \"s/name=\\\"key\\\" value=\\\"anonymous\\\"/name=\\\"key\\\" value=\\\"myOwnLongKey\\\"/\" | \\ sed \"s/name=\\\"key\\\" value=\\\"rollerlovesacegi\\\"/name=\\\"key\\\" value=\\\"myOwnLongKey2\\\"/\" \\ > security.xml #Pack war file cd .. jar cvf ../../../roller.war * Now we're nearly finished … just a few seconds away from experimenting with your own roller instance now :). As a next necessary step we need to create a custom configuration file for Roller. That configuration file has to be saved in /opt/roller/glassfish/domains/roller/lib/classes/roller-custom.properties to take effect. The configuration file can be built as follows: root@sigusr1:$ #Build roller-custom.properties cat <<EOF > $TARGET/glassfish/domains/roller/lib/classes/roller-custom.properties installation.type=auto #Should work with JNDI but maybe not with glassfish mail.configurationType=properties mail.hostname=localhost planet.aggregator.enabled=true uploads.dir=$UPLOADS themes.dir=$THEMES search.index.dir=$SEARCH_INDEX planet.aggregator.cache.dir=$PLANET_CACHE EOF Now that the configuration is in place, we are finally ready to deploy the Roller application. With the deployment we are able to specify a context root, which is the ( URL ) location where your application can be reached later on. So if you specify blogs then your application can later be accessed at http://your.example.com:8080/blogs . root@sigusr1:$ #Deploy application cd $TARGET /glassfish ./bin/asadmin deploy --contextroot blogs ../tmp/roller.war Just to be sure everything you've installed so far has correct permission, you might want to run the following commands again. It fixes your permissions and runs Glassfish as roller user. root@sigusr1:$ # Fix permissions chown -R roller:roller /opt/roller #Restart gf to make changes effective ./bin/asadmin stop-domain roller # Start as roller user su -c \"./bin/asadmin start-domain roller\" roller After you've done all that you now should have a ready to go roller installation. Now go visit http://localhost:8080/blogs and configure your shiny new roller installation. It is pretty much self explanatory, but if you need further assistance, you might want to have a look into the installation guide, which you can get here (see chapter 8ff). Now after you've set up everything exactly as you like, you should change /opt/roller/glassfish/domains/roller/lib/classes/roller-custom.properties to read installation.type=manual","tags":"Infrastructure","url":"https://authsec.github.io/datapile/setup-roller-weblogger-41-on-glassfish-v2","loc":"https://authsec.github.io/datapile/setup-roller-weblogger-41-on-glassfish-v2"}]};